{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\n\nconst useValidacion = (stateInicial, validar, fn) => {\n  const {\n    0: valores,\n    1: guardaValores\n  } = useState(stateInicial);\n  const {\n    0: errores,\n    1: guardarErrores\n  } = useState({});\n  const {\n    0: submitForm,\n    1: guardarSubmitForm\n  } = useState(false);\n  useEffect(() => {\n    if (submitForm) {\n      const noErrores = Object.keys(errores).length === 0;\n\n      if (noErrores) {\n        fn();\n      }\n\n      guardarSubmitForm(false);\n    }\n  }, [errores]); //Funcion que se ejecuta conforme el usuario escribe algo\n\n  const handleChange = e => {\n    guardaValores(_objectSpread(_objectSpread({}, valores), {}, {\n      [e.target.name]: e.target.value\n    }));\n  }; //Funcion que se ejecuta cuando el usuario hace submit\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const erroresvalidacion = validar(valores);\n    guardarErrores(erroresvalidacion);\n    guardarSubmitForm(true);\n  }; //Cuando se realiza el evento\n\n\n  const handleBlur = () => {\n    const erroresvalidacion = validar(valores);\n    guardarErrores(erroresvalidacion);\n  };\n\n  return {\n    valores,\n    errores,\n    handleChange,\n    handleSubmit,\n    handleBlur\n  };\n};\n\nexport default useValidacion;","map":null,"metadata":{},"sourceType":"module"}