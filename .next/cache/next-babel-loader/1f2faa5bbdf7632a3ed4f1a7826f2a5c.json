{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _styled from \"@emotion/styled-base\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useEffect, useContext, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport { es } from 'date-fns/locale';\nimport { FirebaseContext } from '../../firebase';\nimport Layout from '../../components/layout/Layout';\nimport Error404 from '../../components/layout/404';\nimport { css } from '@emotion/core';\nimport { Campo, InputSubmit } from '../../components/ui/Formulario';\nimport Boton from '../../components/ui/Boton';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar ContenedorProducto = _styled(\"div\", {\n  target: \"eedffhf0\"\n})(true ? {\n  name: \"uunn56\",\n  styles: \"@media(min-width:768px){display:grid;grid-template-columns:2fr 1fr;column-gap:2rem;}\"\n} : {\n  name: \"uunn56\",\n  styles: \"@media(min-width:768px){display:grid;grid-template-columns:2fr 1fr;column-gap:2rem;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar CreadorProducto = _styled(\"p\", {\n  target: \"eedffhf1\"\n})(true ? {\n  name: \"15q0m4y\",\n  styles: \"padding:.5rem 2rem;background-color:#DA552F;color:#fff;text-transform:uppercase;font-weight:bold;text-align:center;display:inline-block;\"\n} : {\n  name: \"15q0m4y\",\n  styles: \"padding:.5rem 2rem;background-color:#DA552F;color:#fff;text-transform:uppercase;font-weight:bold;text-align:center;display:inline-block;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar _ref = true ? {\n  name: \"1ap128e\",\n  styles: \"text-align:center;margin-top:5rem;\"\n} : {\n  name: \"1ap128e\",\n  styles: \"text-align:center;margin-top:5rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = true ? {\n  name: \"xqqg40\",\n  styles: \"margin:2rem 0;\"\n} : {\n  name: \"xqqg40\",\n  styles: \"margin:2rem 0;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = true ? {\n  name: \"1x0f0jw\",\n  styles: \"border:1px solid #e1e1e1;padding:2rem;\"\n} : {\n  name: \"1x0f0jw\",\n  styles: \"border:1px solid #e1e1e1;padding:2rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = true ? {\n  name: \"in3yi3\",\n  styles: \"font-weight:bold;\"\n} : {\n  name: \"in3yi3\",\n  styles: \"font-weight:bold;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9nZXJhcmRvcm9zYXMvRG9jdW1lbnRzL3Byb2R1Y3RodW50L3BhZ2VzL3Byb2R1Y3Rvcy9baWRdLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlPNEQiLCJmaWxlIjoiL1VzZXJzL2dlcmFyZG9yb3Nhcy9Eb2N1bWVudHMvcHJvZHVjdGh1bnQvcGFnZXMvcHJvZHVjdG9zL1tpZF0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJztcbmltcG9ydCBmb3JtYXREaXN0YW5jZVRvTm93IGZyb20gJ2RhdGUtZm5zL2Zvcm1hdERpc3RhbmNlVG9Ob3cnO1xuaW1wb3J0IHsgZXMgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xuaW1wb3J0IHsgRmlyZWJhc2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vZmlyZWJhc2UnO1xuaW1wb3J0IExheW91dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xheW91dC9MYXlvdXQnO1xuaW1wb3J0IEVycm9yNDA0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbGF5b3V0LzQwNCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IENhbXBvLCBJbnB1dFN1Ym1pdCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdWkvRm9ybXVsYXJpbyc7XG5pbXBvcnQgQm90b24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy91aS9Cb3Rvbic7XG5cbmNvbnN0IENvbnRlbmVkb3JQcm9kdWN0byA9IHN0eWxlZC5kaXZgXG4gICAgQG1lZGlhKG1pbi13aWR0aDogNzY4cHgpe1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAxZnI7XG4gICAgICAgIGNvbHVtbi1nYXA6IDJyZW07XG4gICAgfVxuYDtcblxuY29uc3QgQ3JlYWRvclByb2R1Y3RvID0gc3R5bGVkLnBgXG4gICAgcGFkZGluZzogLjVyZW0gMnJlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREE1NTJGO1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbmA7XG5cbmNvbnN0IFByb2R1Y3RvID0gKCkgPT4ge1xuXG4gICAgY29uc3QgW3Byb2R1Y3RvLCBndWFyZGFyUHJvZHVjdG8gXSA9IHVzZVN0YXRlKHt9KTtcbiAgICBjb25zdCBbIGVycm9yLCBndWFyZGFyRXJyb3IgXSA9ICB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgWyBudWV2b0NvbWVudGFyaW8sIGd1YXJkYXJOdWV2b0NvbWVudGFyaW8gXSA9IHVzZVN0YXRlKHt9KTtcbiAgICBjb25zdCBbIGNvbnN1bHRhckRCLCBndWFyZGFyQ29uc3VsdGFyREIgXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gICAgLy9Sb3V0aW5nIHBhcmEgb2J0ZW5lciBlbCBpZCBhY3R1YWxcbiAgICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICBjb25zdCB7IHF1ZXJ5OiB7aWR9fSA9IHJvdXRlcjtcblxuICAgIGNvbnN0IHsgZmlyZWJhc2UsIHVzdWFyaW8gfSA9IHVzZUNvbnRleHQoRmlyZWJhc2VDb250ZXh0KTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmKGlkICYmIGNvbnN1bHRhckRCKXtcbiAgICAgICAgICAgIGNvbnN0IG9idGVuZXJQcm9kdWN0byA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0b1F1ZXJ5ID0gYXdhaXQgZmlyZWJhc2UuZGIuY29sbGVjdGlvbigncHJvZHVjdG9zJykuZG9jKGlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0byA9IGF3YWl0IHByb2R1Y3RvUXVlcnkuZ2V0KCk7XG4gICAgICAgICAgICAgICAgaWYocHJvZHVjdG8uZXhpc3RzKXtcbiAgICAgICAgICAgICAgICAgICAgZ3VhcmRhclByb2R1Y3RvKHByb2R1Y3RvLmRhdGEoKSk7XG4gICAgICAgICAgICAgICAgICAgIGd1YXJkYXJDb25zdWx0YXJEQihmYWxzZSk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGd1YXJkYXJFcnJvcih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgZ3VhcmRhckNvbnN1bHRhckRCKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYnRlbmVyUHJvZHVjdG8oKTtcbiAgICAgICAgfVxuICAgIH0sIFtpZF0pO1xuXG4gICAgaWYoT2JqZWN0LmtleXMocHJvZHVjdG8pLmxlbmd0aCA9PT0gMCAmJiAhZXJyb3IpICByZXR1cm4gJ0NhcmdhbmRvLi4uJztcblxuICAgIGNvbnN0IHtjb21lbnRhcmlvcywgZW1wcmVzYSwgZGVzY3JpcGNpb24sIHZvdG9zLCBub21icmUsIHVybCwgdXJsSW1hZ2VuLCBjcmVhZG8sIFxuICAgICAgICBjcmVhZG9yLCBoYVZvdGFkbyB9ID0gcHJvZHVjdG87XG5cbiAgICAvL0FkbWluaXN0cmFyIHkgdmFsaWRhciBsb3Mgdm90b3NcbiAgICBjb25zdCB2b3RhclByb2R1Y3RvID0gKCkgPT4ge1xuICAgICAgICBpZighdXN1YXJpbyl7XG4gICAgICAgICAgICByZXR1cm4gcm91dGVyLnB1c2goJy9sb2dpbicpXG4gICAgICAgIH1cblxuICAgICAgICAvL09idGVuZXIgeSBzdW1hciB1biBudWV2byB2b3RvXG4gICAgICAgIGNvbnN0IG51ZXZvVG90YWwgPSB2b3RvcyArIDE7XG5cbiAgICAgICAgLy9WZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBhY3R1YWwgaGEgdm90YWRvXG4gICAgICAgIGlmKGhhVm90YWRvLmluY2x1ZGVzKHVzdWFyaW8udWlkKSkgcmV0dXJuO1xuXG4gICAgICAgIC8vR3VhcmRhciBlbCBpZCBkZWwgdXN1YXJpbyBxdWUgaGEgdm90YWRvXG4gICAgICAgIGNvbnN0IGhhblZvdGFkbyA9IFsuLi5oYVZvdGFkbywgdXN1YXJpby51aWRdO1xuICAgICAgICBcblxuICAgICAgICAvL0FjdHVhbGl6YXIgZW4gbGEgYmFzZSBkZSBkYXRvc1xuICAgICAgICBmaXJlYmFzZS5kYi5jb2xsZWN0aW9uKCdwcm9kdWN0b3MnKS5kb2MoaWQpLnVwZGF0ZSh7IFxuICAgICAgICAgICAgdm90b3M6IG51ZXZvVG90YWwsIFxuICAgICAgICAgICAgaGFWb3RhZG86IGhhblZvdGFkbyBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9BY3R1YWxpemFyIGVsIHN0YXRlXG4gICAgICAgIGd1YXJkYXJQcm9kdWN0byh7XG4gICAgICAgICAgICAuLi5wcm9kdWN0byxcbiAgICAgICAgICAgIHZvdG9zOiBudWV2b1RvdGFsXG4gICAgICAgIH0pXG5cbiAgICAgICAgZ3VhcmRhckNvbnN1bHRhckRCKHRydWUpOyAvL0hheSB1biB2b3RvIHkgY29uc3VsdGFyIGEgbGEgYmFzZSBkZSBkYXRvc1xuICAgIH1cblxuICAgIC8vRnVuY2lvbmVzIHBhcmEgY3JlYXIgY29tZW50YXJpb3NcbiAgICBjb25zdCBjb21lbnRhcmlvQ2hhbmdlID0gZSA9PiB7XG4gICAgICAgIGd1YXJkYXJOdWV2b0NvbWVudGFyaW8oe1xuICAgICAgICAgICAgLi4ubnVldm9Db21lbnRhcmlvLFxuICAgICAgICAgICAgW2UudGFyZ2V0Lm5hbWVdIDogZS50YXJnZXQudmFsdWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvL0lkZW50aWZpY2Egc2kgZWwgY29tZW50YXJpbyBlcyBkZWwgY3JlYWRvciBkZWwgcHJvZHVjdG9cbiAgICBjb25zdCBlc0NyZWFkb3IgPSBpZCA9PiB7XG4gICAgICAgIGlmKGNyZWFkb3IuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFncmVnYXJDb21lbnRhcmlvID0gZSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYoIXVzdWFyaW8pe1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5wdXNoKCcvbG9naW4nKVxuICAgICAgICB9XG5cbiAgICAgICAgLy9pbmZvcm1hY2lvbiBleHRyYSBhbCBjb21lbnRhcmlvXG4gICAgICAgIG51ZXZvQ29tZW50YXJpby51c3VhcmlvSWQgPSB1c3VhcmlvLnVpZDtcbiAgICAgICAgbnVldm9Db21lbnRhcmlvLnVzdWFyaW9Ob21icmUgPSB1c3VhcmlvLmRpc3BsYXlOYW1lO1xuXG4gICAgICAgIC8vVG9tYXIgY29waWEgZGUgY29tZW50YXJpb3MgeSBhZ3JlZ2FyIGFsIGFycmVnbG9cbiAgICAgICAgY29uc3QgbnVldm9zQ29tZW50YXJpb3MgPSBbLi4uY29tZW50YXJpb3MsIG51ZXZvQ29tZW50YXJpb107XG5cbiAgICAgICAgLy9BY3R1YWxpemFyIGxhIGJhc2UgZGUgZGF0b3NcbiAgICAgICAgZmlyZWJhc2UuZGIuY29sbGVjdGlvbigncHJvZHVjdG9zJykuZG9jKGlkKS51cGRhdGUoe1xuICAgICAgICAgICAgY29tZW50YXJpb3M6IG51ZXZvc0NvbWVudGFyaW9zXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy9BY3R1YWl6YXIgZWwgc3RhdGVcbiAgICAgICAgZ3VhcmRhclByb2R1Y3RvKHtcbiAgICAgICAgICAgIC4uLnByb2R1Y3RvLFxuICAgICAgICAgICAgY29tZW50YXJpb3M6IG51ZXZvc0NvbWVudGFyaW9zXG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICAvL0Z1bmNpb24gcXVlIHJldmlzYSBxdWUgZWwgY3JlYWRvciBkZWwgcHJvZHVjdG8gc2VhIGVsIG1pc21vIGF1dGVudGljYWRvXG4gICAgY29uc3QgcHVlZGVCb3JyYXIgPSAoKSA9PiB7XG4gICAgICAgIGlmKCF1c3VhcmlvKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYoY3JlYWRvci5pZCA9PT0gdXN1YXJpby51aWQpe1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vRWxpbWluYSBwcm9kdWN0byBkZSBsYSBiYXNlIGRlIGRhdG9zXG4gICAgY29uc3QgZWxpbWluYXJQcm9kdWN0byA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYoIXVzdWFyaW8pe1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5wdXNoKCcvbG9naW4nKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoY3JlYWRvci5pZCAhPT0gdXN1YXJpby51aWQpe1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5wdXNoKCcvbG9naW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBmaXJlYmFzZS5kYi5jb2xsZWN0aW9uKCdwcm9kdWN0b3MnKS5kb2MoaWQpLmRlbGV0ZSgpXG4gICAgICAgICAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuXG4gICAgcmV0dXJuICggXG4gICAgICAgIDxMYXlvdXQ+XG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIHtlcnJvciAmJiA8RXJyb3I0MDQgLz59XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbmVkb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgxIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogNXJlbTtcbiAgICAgICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAgICAgPntub21icmV9PC9oMT5cblxuICAgICAgICAgICAgICAgICAgICA8Q29udGVuZWRvclByb2R1Y3RvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogPHA+UHVibGljYWRvIGhhY2U6IHtmb3JtYXREaXN0YW5jZVRvTm93KCBuZXcgRGF0ZShjcmVhZG8pLCB7bG9jYWxlOiBlc30pfTwvcD4gKi99XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dXJsSW1hZ2VufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8cD5Qb3I6IHtjcmVhZG9yLm5vbWJyZX0gPC9wPiAqL31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57ZGVzY3JpcGNpb259PC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3VzdWFyaW8gJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkFncmVnYSB0dSBjb21lbnRhcmlvPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FncmVnYXJDb21lbnRhcmlvfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYW1wbz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwibWVuc2FqZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Y29tZW50YXJpb0NoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NhbXBvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFN1Ym1pdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJBZ3JlZ2FyIENvbWVudGFyaW9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAycmVtIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPkNvbWVudGFyaW9zPC9oMj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb21lbnRhcmlvcy5sZW5ndGggPT09IDAgPyBcIkHDum4gbm8gaGF5IGNvbWVudGFyaW9zXCIgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb21lbnRhcmlvcy5tYXAoKGNvbWVudGFyaW8sIGkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YCR7Y29tZW50YXJpby51c3VhcmlvSWR9LSR7aX1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMWUxZTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2NvbWVudGFyaW8ubWVuc2FqZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVzY3JpdG8gcG9yOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnJ30ge2NvbWVudGFyaW8udXN1YXJpb05vbWJyZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGVzQ3JlYWRvciggY29tZW50YXJpby51c3VhcmlvSWQgKSAmJiA8Q3JlYWRvclByb2R1Y3RvPkVzIENyZWFkb3I8L0NyZWFkb3JQcm9kdWN0bz4gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YXNpZGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJvdG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnQ29sb3I9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17dXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5WaXNpdGFyIFVSTDwvQm90b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogNXJlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgfT57dm90b3N9IFZvdG9zPC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1c3VhcmlvICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3RvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3ZvdGFyUHJvZHVjdG99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+Vm90YXI8L0JvdG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hc2lkZT5cbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW5lZG9yUHJvZHVjdG8+XG5cbiAgICAgICAgICAgICAgICAgICAge3B1ZWRlQm9ycmFyKCkgJiYgPEJvdG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtlbGltaW5hclByb2R1Y3RvfVxuICAgICAgICAgICAgICAgICAgICA+RWxpbWluYXIgUHJvZHVjdG88L0JvdG9uPn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvPlxuXG4gICAgICAgIDwvTGF5b3V0PlxuICAgICk7XG59XG4gXG5leHBvcnQgZGVmYXVsdCBQcm9kdWN0bzsiXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = true ? {\n  name: \"aeoew\",\n  styles: \"margin-top:5rem;\"\n} : {\n  name: \"aeoew\",\n  styles: \"margin-top:5rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref6 = true ? {\n  name: \"xi606m\",\n  styles: \"text-align:center;\"\n} : {\n  name: \"xi606m\",\n  styles: \"text-align:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar Producto = function Producto() {\n  var _useState = useState({}),\n      producto = _useState[0],\n      guardarProducto = _useState[1];\n\n  var _useState2 = useState(false),\n      error = _useState2[0],\n      guardarError = _useState2[1];\n\n  var _useState3 = useState({}),\n      nuevoComentario = _useState3[0],\n      guardarNuevoComentario = _useState3[1];\n\n  var _useState4 = useState(true),\n      consultarDB = _useState4[0],\n      guardarConsultarDB = _useState4[1]; //Routing para obtener el id actual\n\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useContext = useContext(FirebaseContext),\n      firebase = _useContext.firebase,\n      usuario = _useContext.usuario;\n\n  useEffect(function () {\n    if (id && consultarDB) {\n      var obtenerProducto = /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var productoQuery, producto;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return firebase.db.collection('productos').doc(id);\n\n                case 2:\n                  productoQuery = _context.sent;\n                  _context.next = 5;\n                  return productoQuery.get();\n\n                case 5:\n                  producto = _context.sent;\n\n                  if (producto.exists) {\n                    guardarProducto(producto.data());\n                    guardarConsultarDB(false);\n                  } else {\n                    guardarError(true);\n                    guardarConsultarDB(false);\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function obtenerProducto() {\n          return _ref7.apply(this, arguments);\n        };\n      }();\n\n      obtenerProducto();\n    }\n  }, [id]);\n  if (Object.keys(producto).length === 0 && !error) return 'Cargando...';\n  var comentarios = producto.comentarios,\n      empresa = producto.empresa,\n      descripcion = producto.descripcion,\n      votos = producto.votos,\n      nombre = producto.nombre,\n      url = producto.url,\n      urlImagen = producto.urlImagen,\n      creado = producto.creado,\n      creador = producto.creador,\n      haVotado = producto.haVotado; //Administrar y validar los votos\n\n  var votarProducto = function votarProducto() {\n    if (!usuario) {\n      return router.push('/login');\n    } //Obtener y sumar un nuevo voto\n\n\n    var nuevoTotal = votos + 1; //Verificar si el usuario actual ha votado\n\n    if (haVotado.includes(usuario.uid)) return; //Guardar el id del usuario que ha votado\n\n    var hanVotado = [].concat(_toConsumableArray(haVotado), [usuario.uid]); //Actualizar en la base de datos\n\n    firebase.db.collection('productos').doc(id).update({\n      votos: nuevoTotal,\n      haVotado: hanVotado\n    }); //Actualizar el state\n\n    guardarProducto(_objectSpread(_objectSpread({}, producto), {}, {\n      votos: nuevoTotal\n    }));\n    guardarConsultarDB(true); //Hay un voto y consultar a la base de datos\n  }; //Funciones para crear comentarios\n\n\n  var comentarioChange = function comentarioChange(e) {\n    guardarNuevoComentario(_objectSpread(_objectSpread({}, nuevoComentario), {}, _defineProperty({}, e.target.name, e.target.value)));\n  }; //Identifica si el comentario es del creador del producto\n\n\n  var esCreador = function esCreador(id) {\n    if (creador.id === id) {\n      return true;\n    }\n  };\n\n  var agregarComentario = function agregarComentario(e) {\n    e.preventDefault();\n\n    if (!usuario) {\n      return router.push('/login');\n    } //informacion extra al comentario\n\n\n    nuevoComentario.usuarioId = usuario.uid;\n    nuevoComentario.usuarioNombre = usuario.displayName; //Tomar copia de comentarios y agregar al arreglo\n\n    var nuevosComentarios = [].concat(_toConsumableArray(comentarios), [nuevoComentario]); //Actualizar la base de datos\n\n    firebase.db.collection('productos').doc(id).update({\n      comentarios: nuevosComentarios\n    }); //Actuaizar el state\n\n    guardarProducto(_objectSpread(_objectSpread({}, producto), {}, {\n      comentarios: nuevosComentarios\n    }));\n  }; //Funcion que revisa que el creador del producto sea el mismo autenticado\n\n\n  var puedeBorrar = function puedeBorrar() {\n    if (!usuario) return false;\n\n    if (creador.id === usuario.uid) {\n      return true;\n    }\n  }; //Elimina producto de la base de datos\n\n\n  var eliminarProducto = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (usuario) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", router.push('/login'));\n\n            case 2:\n              if (!(creador.id !== usuario.uid)) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", router.push('/login'));\n\n            case 4:\n              _context2.prev = 4;\n              _context2.next = 7;\n              return firebase.db.collection('productos').doc(id)[\"delete\"]();\n\n            case 7:\n              router.push('/');\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.log(_context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 10]]);\n    }));\n\n    return function eliminarProducto() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  return ___EmotionJSX(Layout, null, ___EmotionJSX(React.Fragment, null, error && ___EmotionJSX(Error404, null), ___EmotionJSX(\"div\", {\n    className: \"contenedor\"\n  }, ___EmotionJSX(\"h1\", {\n    css: _ref\n  }, nombre), ___EmotionJSX(ContenedorProducto, null, ___EmotionJSX(\"div\", null, ___EmotionJSX(\"img\", {\n    src: urlImagen\n  }), ___EmotionJSX(\"p\", null, descripcion), usuario && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"h2\", null, \"Agrega tu comentario\"), ___EmotionJSX(\"form\", {\n    onSubmit: agregarComentario\n  }, ___EmotionJSX(Campo, null, ___EmotionJSX(\"input\", {\n    type: \"text\",\n    name: \"mensaje\",\n    onChange: comentarioChange\n  })), ___EmotionJSX(InputSubmit, {\n    type: \"submit\",\n    value: \"Agregar Comentario\"\n  }))), ___EmotionJSX(\"h2\", {\n    css: _ref2\n  }, \"Comentarios\"), comentarios.length === 0 ? \"Aún no hay comentarios\" : ___EmotionJSX(\"ul\", null, comentarios.map(function (comentario, i) {\n    return ___EmotionJSX(\"li\", {\n      key: \"\".concat(comentario.usuarioId, \"-\").concat(i),\n      css: _ref3\n    }, ___EmotionJSX(\"p\", null, comentario.mensaje), ___EmotionJSX(\"p\", null, \"Escrito por:\", ___EmotionJSX(\"span\", {\n      css: _ref4\n    }, '', \" \", comentario.usuarioNombre)), esCreador(comentario.usuarioId) && ___EmotionJSX(CreadorProducto, null, \"Es Creador\"));\n  }))), ___EmotionJSX(\"aside\", null, ___EmotionJSX(Boton, {\n    target: \"_blank\",\n    bgColor: \"true\",\n    href: url\n  }, \"Visitar URL\"), ___EmotionJSX(\"div\", {\n    css: _ref5\n  }, ___EmotionJSX(\"p\", {\n    css: _ref6\n  }, votos, \" Votos\"), usuario && ___EmotionJSX(Boton, {\n    onClick: votarProducto\n  }, \"Votar\")))), puedeBorrar() && ___EmotionJSX(Boton, {\n    onClick: eliminarProducto\n  }, \"Eliminar Producto\"))));\n};\n\nexport default Producto;","map":null,"metadata":{},"sourceType":"module"}